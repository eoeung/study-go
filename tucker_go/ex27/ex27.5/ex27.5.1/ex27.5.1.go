package main

// [객체 지향 설계 원칙 SOLID]
// 1) Single Responsibility (단일 책임 원칙)
// 2) Open-Closed (개방-폐쇄 원칙)
// 3) Liskov Substitution (리스코프 치환 원칙)
// 4) Interface Segregation (인터페이스 분리 원칙)
// 5) Dependency Inversion (의존 관계 역전 원칙)

// 5) Dependency Inversion (의존 관계 역전 원칙)
//   - 상위 계층이 하위 계층에 의존하는 전통적인 의존 관계를 반전(역전)시킴으로써
//     상위 계층이 하위 계층의 구현으로부터 독립되게 할 수 있다.

//   원칙 1) 상위 모듈은 하위 모듈에 의존해서는 안된다.
//           둘 다 모두 추상 모듈에 의존해야한다.

// 원칙 1) 예제
// 1) Top-Down 방식으로 생각해보기
// - 키보드로 입력한 값을 네트워크로 전송
//        전송
//    ┌────┴────┐
//  키보드    네트워크
// 이라는 Top-Down 방식의 사고로 진행할 수 있음
// (1) 전송 이라는 상위 모듈은 키보드라는 하위 모듈에서 값을 받는다.
// (2) 네트워크라는 하위 모듈로 값을 전송한다.

// 2) 의존 관계를 역전해서 생각해보기 - 상위 모듈은 하위 모듈에 의존하면 안됨
//   (1) 전송이라는 기능은 결국 입력과 출력을 연결해주는 개념

// <<interface>> ← 전송 → <<interface>>
//     입력                   출력
//      │                      │
//    키보드                 네트워크

//   (2) 키보드, 네트워크라는 구체화된 객체와 연결지어서 전송이라는 기능을 구현한다고 생각하지 말기
//   (3) 키보드와 네트워크는 각각 입력과 출력이라는 추상화된 모듈을 구현한다. → 추상화된 모듈에 의존하고 있다.
//   (4) 전송 또한 입력과 출력이라는 추상화된 모듈에 의존하고 있다.
//   (5) 키보드라는 입력 장치 외에 터치, 제스처 등 입력 장치가 입력이라는 추상화된 모듈을 구현하면 얼마든지 사용 가능하다.
//   (6) 마찬가지로 네트워크 외에 프린트 등 출력 장치 또한 얼마든지 사용 가능하다.
